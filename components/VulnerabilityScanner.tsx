'use client'

import { useState } from 'react'
import { Search, Shield, AlertTriangle, CheckCircle, Clock, Bug, Zap } from 'lucide-react'

interface Vulnerability {
  id: string
  name: string
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info'
  description: string
  cve?: string
  cvss?: number
  affected?: string
  recommendation: string
}

interface ScanResult {
  target: string
  timestamp: string
  vulnerabilities: Vulnerability[]
  summary: {
    critical: number
    high: number
    medium: number
    low: number
    info: number
  }
}

export default function VulnerabilityScanner() {
  const [target, setTarget] = useState('')
  const [scanType, setScanType] = useState('web')
  const [isScanning, setIsScanning] = useState(false)
  const [results, setResults] = useState<ScanResult | null>(null)
  const [scanProgress, setScanProgress] = useState(0)

  const scanTypes = [
    { id: 'web', name: 'Web Application', description: 'Scan web apps for common vulnerabilities' },
    { id: 'network', name: 'Network', description: 'Scan network services and protocols' },
    { id: 'os', name: 'Operating System', description: 'Scan OS-level vulnerabilities' }
  ]

  const mockVulnerabilities: Vulnerability[] = [
    {
      id: 'SQLI-001',
      name: 'SQL Injection Vulnerability',
      severity: 'critical',
      description: 'Application is vulnerable to SQL injection attacks through user input fields.',
      cve: 'CVE-2023-1234',
      cvss: 9.8,
      affected: 'Login form, search functionality',
      recommendation: 'Implement parameterized queries and input validation'
    },
    {
      id: 'XSS-001',
      name: 'Cross-Site Scripting (XSS)',
      severity: 'high',
      description: 'Reflected XSS vulnerability found in comment section.',
      cve: 'CVE-2023-5678',
      cvss: 7.2,
      affected: 'Comment system, user input fields',
      recommendation: 'Implement proper output encoding and Content Security Policy'
    },
    {
      id: 'AUTH-001',
      name: 'Weak Authentication',
      severity: 'medium',
      description: 'Application uses weak password policies and lacks rate limiting.',
      affected: 'Authentication system',
      recommendation: 'Implement strong password policies and rate limiting'
    },
    {
      id: 'INFO-001',
      name: 'Information Disclosure',
      severity: 'low',
      description: 'Server reveals version information in HTTP headers.',
      affected: 'HTTP response headers',
      recommendation: 'Remove or obfuscate version information in headers'
    },
    {
      id: 'CONFIG-001',
      name: 'Security Misconfiguration',
      severity: 'medium',
      description: 'Default error pages reveal sensitive information.',
      affected: 'Error handling',
      recommendation: 'Implement custom error pages and proper logging'
    }
  ]

  const simulateVulnerabilityScan = async () => {
    if (!target) {
      alert('Please enter a target URL or IP address')
      return
    }

    setIsScanning(true)
    setScanProgress(0)
    setResults(null)

    // Simulate scanning phases
    const phases = [
      'Initializing scan...',
      'Checking network connectivity...',
      'Scanning for open ports...',
      'Analyzing web application...',
      'Checking for common vulnerabilities...',
      'Generating report...'
    ]

    for (let i = 0; i < phases.length; i++) {
      await new Promise(resolve => setTimeout(resolve, 800 + Math.random() * 400))
      setScanProgress(((i + 1) / phases.length) * 100)
    }

    // Generate mock results
    const foundVulnerabilities = mockVulnerabilities.filter(() => Math.random() > 0.3)
    
    const summary = {
      critical: foundVulnerabilities.filter(v => v.severity === 'critical').length,
      high: foundVulnerabilities.filter(v => v.severity === 'high').length,
      medium: foundVulnerabilities.filter(v => v.severity === 'medium').length,
      low: foundVulnerabilities.filter(v => v.severity === 'low').length,
      info: foundVulnerabilities.filter(v => v.severity === 'info').length
    }

    setResults({
      target,
      timestamp: new Date().toISOString(),
      vulnerabilities: foundVulnerabilities,
      summary
    })

    setIsScanning(false)
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-500'
      case 'high': return 'text-orange-500'
      case 'medium': return 'text-yellow-500'
      case 'low': return 'text-blue-500'
      case 'info': return 'text-gray-500'
      default: return 'text-gray-400'
    }
  }

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical': return <AlertTriangle className="w-4 h-4 text-red-500" />
      case 'high': return <Bug className="w-4 h-4 text-orange-500" />
      case 'medium': return <Shield className="w-4 h-4 text-yellow-500" />
      case 'low': return <CheckCircle className="w-4 h-4 text-blue-500" />
      case 'info': return <Clock className="w-4 h-4 text-gray-500" />
      default: return <Clock className="w-4 h-4 text-gray-400" />
    }
  }

  const getCVSSColor = (cvss: number) => {
    if (cvss >= 9.0) return 'text-red-500'
    if (cvss >= 7.0) return 'text-orange-500'
    if (cvss >= 4.0) return 'text-yellow-500'
    return 'text-blue-500'
  }

  return (
    <div className="cyber-card max-w-6xl mx-auto">
      <h3 className="text-2xl font-bold mb-6 text-center">Vulnerability Scanner</h3>
      
      {/* Configuration */}
      <div className="mb-8 space-y-6">
        {/* Target Input */}
        <div>
          <label className="block text-sm font-medium mb-2">Target</label>
          <div className="relative">
            <input
              type="text"
              value={target}
              onChange={(e) => setTarget(e.target.value)}
              placeholder="Enter URL or IP address (e.g., https://example.com or 192.168.1.1)"
              className="w-full p-3 bg-dark-700 border border-dark-600 rounded-lg text-white placeholder-gray-400 focus:border-cyber-500 focus:outline-none"
              disabled={isScanning}
            />
            <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
          </div>
        </div>

        {/* Scan Type */}
        <div>
          <label className="block text-sm font-medium mb-2">Scan Type</label>
          <div className="grid md:grid-cols-3 gap-4">
            {scanTypes.map(type => (
              <label key={type.id} className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  value={type.id}
                  checked={scanType === type.id}
                  onChange={(e) => setScanType(e.target.value)}
                  className="w-4 h-4 text-cyber-600 bg-dark-700 border-dark-600 focus:ring-cyber-500"
                  disabled={isScanning}
                />
                <div>
                  <span className="font-medium">{type.name}</span>
                  <p className="text-sm text-gray-400">{type.description}</p>
                </div>
              </label>
            ))}
          </div>
        </div>

        {/* Scan Button */}
        <button
          onClick={simulateVulnerabilityScan}
          disabled={isScanning || !target}
          className="w-full cyber-button flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isScanning ? (
            <>
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
              <span>Scanning for Vulnerabilities...</span>
            </>
          ) : (
            <>
              <Zap className="w-5 h-5" />
              <span>Start Vulnerability Scan</span>
            </>
          )}
        </button>
      </div>

      {/* Scan Progress */}
      {isScanning && (
        <div className="mb-8">
          <div className="flex justify-between items-center mb-2">
            <span className="text-sm text-gray-400">Scan Progress</span>
            <span className="text-sm text-cyber-400">{Math.round(scanProgress)}%</span>
          </div>
          <div className="w-full bg-dark-700 rounded-full h-2">
            <div
              className="bg-cyber-500 h-2 rounded-full transition-all duration-300"
              style={{ width: `${scanProgress}%` }}
            ></div>
          </div>
        </div>
      )}

      {/* Results */}
      {results && (
        <div className="space-y-6">
          {/* Summary */}
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            <div className="text-center p-4 bg-red-900/20 border border-red-500/30 rounded-lg">
              <div className="text-2xl font-bold text-red-500">{results.summary.critical}</div>
              <div className="text-sm text-gray-400">Critical</div>
            </div>
            <div className="text-center p-4 bg-orange-900/20 border border-orange-500/30 rounded-lg">
              <div className="text-2xl font-bold text-orange-500">{results.summary.high}</div>
              <div className="text-sm text-gray-400">High</div>
            </div>
            <div className="text-center p-4 bg-yellow-900/20 border border-yellow-500/30 rounded-lg">
              <div className="text-2xl font-bold text-yellow-500">{results.summary.medium}</div>
              <div className="text-sm text-gray-400">Medium</div>
            </div>
            <div className="text-center p-4 bg-blue-900/20 border border-blue-500/30 rounded-lg">
              <div className="text-2xl font-bold text-blue-500">{results.summary.low}</div>
              <div className="text-sm text-gray-400">Low</div>
            </div>
            <div className="text-center p-4 bg-gray-900/20 border border-gray-500/30 rounded-lg">
              <div className="text-2xl font-bold text-gray-500">{results.summary.info}</div>
              <div className="text-sm text-gray-400">Info</div>
            </div>
          </div>

          {/* Vulnerabilities List */}
          <div className="space-y-4">
            <h4 className="text-lg font-semibold">Found Vulnerabilities</h4>
            
            {results.vulnerabilities.length === 0 ? (
              <div className="text-center py-8">
                <CheckCircle className="w-12 h-12 text-success-500 mx-auto mb-4" />
                <h5 className="text-lg font-semibold text-success-400">No Vulnerabilities Found</h5>
                <p className="text-gray-400">The scan completed successfully and no vulnerabilities were detected.</p>
              </div>
            ) : (
              <div className="space-y-4">
                {results.vulnerabilities.map((vuln, index) => (
                  <div key={index} className="border border-dark-600 rounded-lg p-4">
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex items-center space-x-3">
                        {getSeverityIcon(vuln.severity)}
                        <div>
                          <h5 className="font-semibold">{vuln.name}</h5>
                          <div className="flex items-center space-x-4 text-sm">
                            <span className={`font-medium ${getSeverityColor(vuln.severity)}`}>
                              {vuln.severity.toUpperCase()}
                            </span>
                            {vuln.cve && (
                              <span className="text-gray-400">{vuln.cve}</span>
                            )}
                            {vuln.cvss && (
                              <span className={`font-mono ${getCVSSColor(vuln.cvss)}`}>
                                CVSS: {vuln.cvss}
                              </span>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="space-y-3">
                      <p className="text-gray-300">{vuln.description}</p>
                      
                      {vuln.affected && (
                        <div>
                          <span className="text-sm font-medium text-gray-400">Affected:</span>
                          <span className="text-sm text-gray-300 ml-2">{vuln.affected}</span>
                        </div>
                      )}
                      
                      <div>
                        <span className="text-sm font-medium text-cyber-400">Recommendation:</span>
                        <p className="text-sm text-gray-300 mt-1">{vuln.recommendation}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Scan Info */}
          <div className="text-sm text-gray-400">
            <p>Target: {results.target}</p>
            <p>Scan completed: {new Date(results.timestamp).toLocaleString()}</p>
          </div>
        </div>
      )}

      {/* Security Notice */}
      <div className="mt-8 p-4 bg-warning-900/20 border border-warning-500/30 rounded-lg">
        <div className="flex items-start space-x-3">
          <AlertTriangle className="w-5 h-5 text-warning-400 mt-0.5" />
          <div>
            <h4 className="font-semibold text-warning-400 mb-1">Important Notice</h4>
            <p className="text-sm text-gray-300">
              This vulnerability scanner is for educational purposes only. Only scan systems you own or have explicit permission to test. 
              Unauthorized vulnerability scanning may be illegal and could result in legal consequences.
            </p>
          </div>
        </div>
      </div>
    </div>
  )
} 